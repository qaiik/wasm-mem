ByteTypes={i8:Uint8Array,i16:Uint16Array,i32:Uint32Array,i64:BigUint64Array,f32:Float32Array,f64:Float64Array,str:Uint8Array},ByteMult={i8:1,i16:2,i32:4,i64:8,f32:4,f64:8,str:1};class MemoryReader{constructor(e){this.mem=e}read(e,t="i32",r=!1){if("str"!==t)return new ByteTypes[t](this.mem.buffer,e)[0];if(!r){let f=new ByteTypes[t](this.mem.buffer,e),i=0;for(;0!==f[i];)i++;return new TextDecoder("utf-8").decode(f.slice(0,i))}let s=new ByteTypes[t](this.mem.buffer,e);return new TextDecoder("utf-8").decode(s.slice(0,r))}searchEQ(e,t,r=0,f=this.mem.buffer.byteLength){let i=[];for(let s=r;s<f;s+=ByteMult[e])this.read(s,e)==t&&i.push([s,t]);return i}}class MemoryWriter{constructor(e){this.mem=e}Write(e,t,r="i32",f=!1){"str"!==r&&(new ByteTypes[r](this.mem.buffer,e)[0]=t);let i=new ByteTypes[r](this.mem.buffer,e);for(let s=0;s<t.length;s++)i[s]=new TextEncoder("utf-8").encode(t[s]);if(extra)for(let n=0;n<f-t.length;n++)i[t.length+n]="\0"}}
